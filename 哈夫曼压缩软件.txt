目标：利用哈夫曼树的数据来实现压缩和解压缩。
1.有一个英文的文档，统计英文文档中每一个字符出现的频率；
	InputStream|FileInputStream|BufferedInputStream
	HashMap<String、Integer>
2.根据字符的频率进行排序操作（从小到大）；
	Set
	Iterator
	PriorityQueue
	Comparator
3.根据字符和频率构建一个哈夫曼二叉树；
	哈夫曼二叉树是所有二叉树中带权路径最短的一种二叉树。
	整颗哈夫曼二叉树的带权路径 = 叶子节点的频率*叶子节点到根节点的边数+..... 
	叶子节点的带权路径 = 叶子节点的频率*叶子节点到根节点的边数;
	
	构建哈夫曼二叉树的规则：
		1.左子树小于右子树
		2.获取两个最小频率的字符，根据这个两个数据构建一个父节点；
		3.将父节点存入优先队列中；
		4.重复2，直到优先队列中只有一个数据的时候就是你哈夫曼二叉树的根节点。
	
4.遍历哈夫曼二叉树，获取每一个叶子节点的编码；
	前序：根左右
	中序：左根右
	后序：左右根
	递归
	遍历过程中，如果是左子树则编码为0，如果是右子树则编码为1
	
	
构建哈夫曼二叉树图：
数据是  d2  b5  f9  a10   c20
根节点是cadbf 46
	      
		cadbf  46
	c20	  adbf 26       
	a 10	  dbf  16
	     db 7     f 9
	d 2     b 5
	
5.根据叶子节点的编码将文章转换成编码。
6.将每8个0~1就转换为1个byte，写入到文件中。
7.解压缩

